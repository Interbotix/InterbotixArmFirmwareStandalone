/***********************************************************************************
 *  }--\     InterbotiX Robotic Arm            /--{
 *      |       Playback Code                 |
 *   __/           Minimal                    \__
 *  |__|                                       |__|
 *
 *
 *  The following sketch will playback a sequence one time automatically once
 *  the arm starts up.
 *
 *=============================================================================
 * Based upon Kurt's PX Reactor arm code.
 * https://github.com/KurtE
 * This code provides serial control of the Interbotix line of robotic arms, which are sold by Trossen Robotics:
 * http://www.trossenrobotics.com/robotic-arms.aspx
 * http://learn.trossenrobotics.com/interbotix/robot-arms
 *=============================================================================
 * 
 *   This code is a Work In Progress and is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 *   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 ****************************************************************************************************************/

//=============================================================================
// Define Options
//=============================================================================

#define PINCHER 1
#define REACTOR 2
#define WIDOWX 3

//uncomment one of the following lines depending on which arm you want to use
//#define ARMTYPE PINCHER
//#define ARMTYPE REACTOR
//#define ARMTYPE WIDOWX

#if !defined(ARMTYPE) 
   #error YOU HAVE TO SELECT THE ARM YOU ARE USING! Uncomment the correct line above for your arm
#endif

#define MAX_SERVO_DELTA_PERSEC 512
//#define DEBUG             // Enable Debug mode via serial

//=============================================================================
// Global Include files
//=============================================================================
//DYNAMIXEL Control libraries
#include <ax12.h>
#include <BioloidController.h>

//input control file - local
#include "Kinematics.h"

//=============================================================================
// Global Objects
//=============================================================================
BioloidController bioloid = BioloidController(1000000);

//===================================================================================================
// Setup 
//====================================================================================================
void setup() {
  // Next initialize the Bioloid
  bioloid.poseSize = CNT_SERVOS;

  // Read in the current positions...
  bioloid.readPose();
  delay(100);
  
  // Start off to put arm to sleep...
  PutArmToSleep();
  
  //set Gripper Compliance so it doesn't tear itself apart
  ax12SetRegister(SID_GRIP, AX_CW_COMPLIANCE_SLOPE, 128);
  ax12SetRegister(SID_GRIP, AX_CCW_COMPLIANCE_SLOPE, 128);


  boolean fChanged = false;
  
  g_bIKMode = IKM_IK3D_CARTESIAN;
  
  //###########################################################//
  // SEQUENCE 1
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 2
  //###########################################################// 
  IKSequencingControl(-100 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 3
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 4
  //###########################################################// 
  IKSequencingControl(0 , 200 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 5
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 6
  //###########################################################// 
  IKSequencingControl(0 , 150 , 200 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 7
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 8
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , -30 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 9
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 10
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 0 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 11
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 12
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 512 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 13
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 14
  //###########################################################// 
  IKSequencingControl(100 , 220 , 220 , 0 , 512 , 255 , 4080 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 15
  //###########################################################// 
  IKSequencingControl(0 , 150 , 150 , 0 , 512 , 0 , 2000 , 1000, 1);
  //###########################################################// 
  
  //###########################################################//
  // SEQUENCE 16
  //###########################################################// 
  IKSequencingControl(100 , 220 , 220 , 0 , 512 , 25 , 400 , 1000, 1);
  //###########################################################// 
  




  
}//end setup


//===================================================================================================
// loop: Our main Loop!
//===================================================================================================
void loop() 
{

} //end Main




//===================================================================================================
// functions
//===================================================================================================


void IKSequencingControl(float X, float Y, float Z, float GA, float WR, int grip, int interpolate, int pause, int enable)
{
  if(enable == 1)
  {

    if(g_bIKMode == IKM_IK3D_CARTESIAN || g_bIKMode == IKM_IK3D_CARTESIAN_90)
    {
      doArmIK(true, X, Y, Z, GA); 
      
    }
    else if(g_bIKMode == IKM_CYLINDRICAL || g_bIKMode ==IKM_CYLINDRICAL_90)
    {  
    //  sBase = X;
      doArmIK(false, X, Y, Z, GA); 
      
    }
    else if(g_bIKMode == IKM_BACKHOE)
    {
      sBase = X;
      sShoulder = Y;
      sElbow = Z;
      sWrist = GA;
      
    }
    
       
    sWristRot = WR;
    sGrip = grip;
  
    MoveArmTo(sBase, sShoulder, sElbow, sWrist, sWristRot, sGrip, interpolate, true);  
    delay(pause);    
    
  }
}



